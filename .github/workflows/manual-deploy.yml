name: Manual release
run-name: Manual release of ${{ inputs.tag }} to ${{ inputs.stage }}

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag for the release to trigger the pipeline for, eg v1.1.0'
        type: string
        required: true
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true
      stage:
        description: 'Stage to deploy to, must match choice of environment'
        type: choice
        options:
          - test
          - preprod
          - prod

jobs:
  deploy:
    name: Deploy to ${{ inputs.stage }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: Setup Node.js and cache
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('src/pnpm-lock.yaml') }}
          restore-keys: |
              ${{ runner.os }}-pnpm-store-

      - name: Install packages
        run: pnpm i --frozen-lockfile

      - name: Assume role using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/cdd-github-actions-role-eu-west-2
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Deploy to ${{ inputs.stage }}
        env:
          ROOT_DOMAIN: ${{ vars.ROOT_DOMAIN }}
          AWS_SES_IDENTITY_ARN: ${{ secrets.AWS_SES_TEST_IDENTITY }}
          MAP_BOX_ACCESS_TOKEN: ${{ secrets.MAP_BOX_ACCESS_TOKEN }}
        run: |
          pnpm run deploy --stage ${{ inputs.stage }}
