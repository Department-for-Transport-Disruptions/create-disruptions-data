name: Pull Request Merged

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js and cache
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('src/pnpm-lock.yaml') }}
          restore-keys: |
              ${{ runner.os }}-pnpm-store-

      - name: Install packages
        run: pnpm i --frozen-lockfile

      - name: Lint
        run: pnpm run lint

      - name: Test TypeScript compiles
        run: pnpm run tsc:build

      - name: Test
        run: pnpm run test

  deploy_to_test:
    needs: ['build']
    name: Deploy to Test
    runs-on: ubuntu-22.04
    environment: DISRUPTIONS_TEST
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js and cache
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('src/pnpm-lock.yaml') }}
          restore-keys: |
              ${{ runner.os }}-pnpm-store-

      - name: Install packages
        run: pnpm i --frozen-lockfile

      - name: Assume role using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/cdd-github-actions-role-eu-west-2
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Deploy to test
        env:
          ROOT_DOMAIN: ${{ vars.ROOT_DOMAIN }}
          AWS_SES_IDENTITY_ARN: ${{ secrets.AWS_SES_TEST_IDENTITY }}
          MAP_BOX_ACCESS_TOKEN: ${{ secrets.MAP_BOX_ACCESS_TOKEN }}
        run: |
          pnpm run deploy --stage test

  deploy_to_preprod:
    needs: ['deploy_to_test']
    name: Deploy to Pre-Prod
    runs-on: ubuntu-22.04
    environment: DISRUPTIONS_PREPROD
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js and cache
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('src/pnpm-lock.yaml') }}
          restore-keys: |
              ${{ runner.os }}-pnpm-store-

      - name: Install packages
        run: pnpm i --frozen-lockfile

      - name: Assume role using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/cdd-github-actions-role-eu-west-2
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Deploy to pre-prod
        env:
          ROOT_DOMAIN: ${{ vars.ROOT_DOMAIN }}
          AWS_SES_IDENTITY_ARN: ${{ secrets.AWS_SES_TEST_IDENTITY }}
          MAP_BOX_ACCESS_TOKEN: ${{ secrets.MAP_BOX_ACCESS_TOKEN }}
        run: |
          pnpm run deploy --stage preprod

  create_draft_release:
    needs: ['deploy_to_preprod']
    name: Create draft release
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          draft: true
