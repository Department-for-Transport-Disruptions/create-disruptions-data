import { QueryCommandInput, ScanCommandInput } from "@aws-sdk/lib-dynamodb";
import { Disruption } from "../disruptionTypes";
import { PublishStatus } from "../enums";
import { Organisation, OrganisationWithStats } from "../organisationTypes";
import { Logger } from "./index";
export declare const recursiveScan: (scanCommandInput: ScanCommandInput, logger: Logger) => Promise<Record<string, unknown>[]>;
export declare const recursiveQuery: (queryCommandInput: QueryCommandInput, logger: Logger) => Promise<Record<string, unknown>[]>;
export declare const getPublishedDisruptionsDataFromDynamo: (tableName: string, logger: Logger, orgId?: string) => Promise<Disruption[]>;
export declare const getCurrentAndFutureDisruptions: (tableName: string, logger: Logger) => Promise<Disruption[]>;
export declare const getOrganisationsInfo: (organisationsTableName: string, logger: Logger) => Promise<Organisation[] | null>;
export declare const getAllOrganisationsInfoAndStats: (organisationsTableName: string, logger: Logger) => Promise<OrganisationWithStats[] | null>;
export declare const getOrganisationInfoAndStats: (orgId: string, organisationsTableName: string, logger: Logger) => Promise<OrganisationWithStats | null>;
export declare const getPublishedDisruptionById: (orgId: string, disruptionId: string, tableName: string, logger: Logger) => Promise<Disruption | null>;
export declare const getAllDisruptionsForOrg: (orgId: string, tableName: string, logger: Logger) => Promise<({
    summary: string;
    description: string;
    disruptionStartDate: string;
    disruptionStartTime: string;
    id: string;
    disruptionType: "planned" | "unplanned";
    disruptionReason: import("../enums").MiscellaneousReason | import("../enums").PersonnelReason | import("../enums").EquipmentReason | import("../enums").EnvironmentReason;
    publishStartDate: string;
    publishStartTime: string;
    displayId: string;
    orgId?: string | undefined;
    permitReferenceNumber?: string | null | undefined;
    disruptionEndDate?: string | undefined;
    disruptionEndTime?: string | undefined;
    disruptionNoEndDateTime?: "" | "true" | undefined;
    disruptionRepeats?: "doesntRepeat" | "daily" | "weekly" | undefined;
    disruptionRepeatsEndDate?: string | undefined;
    associatedLink?: string | undefined;
    publishEndDate?: string | undefined;
    publishEndTime?: string | undefined;
    validity?: {
        disruptionStartDate: string;
        disruptionStartTime: string;
        disruptionEndDate?: string | undefined;
        disruptionEndTime?: string | undefined;
        disruptionNoEndDateTime?: "" | "true" | undefined;
        disruptionRepeats?: "doesntRepeat" | "daily" | "weekly" | undefined;
        disruptionRepeatsEndDate?: string | undefined;
    }[] | undefined;
    createdByOperatorOrgId?: string | null | undefined;
    creationTime?: string | null | undefined;
} & {
    publishStatus: PublishStatus;
    template: boolean;
    createdByOperatorOrgId?: string | null | undefined;
    creationTime?: string | undefined;
    consequences?: ({
        description: string;
        consequenceType: "networkWide";
        disruptionId: string;
        removeFromJourneyPlanners: "yes" | "no";
        disruptionSeverity: import("../enums").Severity;
        vehicleMode: import("../enums").VehicleMode;
        consequenceIndex: number;
        orgId?: string | undefined;
        disruptionArea?: string[] | undefined;
        disruptionDelay?: string | undefined;
    } | {
        description: string;
        consequenceType: "operatorWide";
        disruptionId: string;
        removeFromJourneyPlanners: "yes" | "no";
        disruptionSeverity: import("../enums").Severity;
        vehicleMode: import("../enums").VehicleMode;
        consequenceIndex: number;
        consequenceOperators: {
            operatorNoc: string;
            operatorPublicName: string;
        }[];
        orgId?: string | undefined;
        disruptionDelay?: string | undefined;
    } | {
        description: string;
        consequenceType: "stops";
        disruptionId: string;
        removeFromJourneyPlanners: "yes" | "no";
        disruptionSeverity: import("../enums").Severity;
        vehicleMode: import("../enums").VehicleMode;
        consequenceIndex: number;
        stops: {
            atcoCode: string;
            commonName: string;
            longitude: number;
            latitude: number;
            indicator?: string | undefined;
            serviceIds?: number[] | undefined;
            bearing?: string | undefined;
            sequenceNumber?: string | undefined;
            direction?: string | undefined;
            stopType?: string | undefined;
            busStopType?: string | undefined;
            journeyPatternId?: number | undefined;
        }[];
        orgId?: string | undefined;
        disruptionDelay?: string | undefined;
        pastStops?: {
            atcoCode: string;
            commonName: string;
            longitude: number;
            latitude: number;
            indicator?: string | undefined;
            serviceIds?: number[] | undefined;
            bearing?: string | undefined;
            sequenceNumber?: string | undefined;
            direction?: string | undefined;
            stopType?: string | undefined;
            busStopType?: string | undefined;
            journeyPatternId?: number | undefined;
        }[] | undefined;
    } | {
        description: string;
        consequenceType: "services";
        disruptionId: string;
        removeFromJourneyPlanners: "yes" | "no";
        disruptionSeverity: import("../enums").Severity;
        vehicleMode: import("../enums").VehicleMode;
        consequenceIndex: number;
        services: {
            id: number;
            lineName: string;
            operatorShortName: string;
            destination: string;
            origin: string;
            nocCode: string;
            dataSource: import("../enums").Datasource;
            startDate: string;
            endDate: string | null;
            serviceCode: string;
            lineId: string;
        }[];
        disruptionDirection: "allDirections" | "inbound" | "outbound";
        orgId?: string | undefined;
        disruptionDelay?: string | undefined;
        stops?: {
            atcoCode: string;
            commonName: string;
            longitude: number;
            latitude: number;
            indicator?: string | undefined;
            serviceIds?: number[] | undefined;
            bearing?: string | undefined;
            sequenceNumber?: string | undefined;
            direction?: string | undefined;
            stopType?: string | undefined;
            busStopType?: string | undefined;
            journeyPatternId?: number | undefined;
        }[] | undefined;
        serviceRefs?: string[] | undefined;
        stopRefs?: string[] | undefined;
    } | {
        description: string;
        consequenceType: "journeys";
        disruptionId: string;
        removeFromJourneyPlanners: "yes" | "no";
        disruptionSeverity: import("../enums").Severity;
        vehicleMode: import("../enums").VehicleMode;
        consequenceIndex: number;
        services: {
            id: number;
            lineName: string;
            operatorShortName: string;
            destination: string;
            origin: string;
            nocCode: string;
            dataSource: import("../enums").Datasource;
            startDate: string;
            endDate: string | null;
            serviceCode: string;
            lineId: string;
        }[];
        journeys: {
            direction: string;
            destination: string;
            origin: string;
            dataSource: import("../enums").Datasource;
            vehicleJourneyCode: string;
            departureTime: string;
            journeyCode?: string | null | undefined;
        }[];
        orgId?: string | undefined;
        disruptionDelay?: string | undefined;
        serviceRefs?: string[] | undefined;
        journeyRefs?: string[] | undefined;
    })[] | undefined;
    lastUpdated?: string | undefined;
    history?: {
        status: PublishStatus;
        historyItems: string[];
        user: string;
        datetime: string;
    }[] | undefined;
})[]>;
export declare const getDisruptionsWithRoadworks: (permitReferenceNumbers: string[], tableName: string, publishStatus: PublishStatus, logger: Logger) => Promise<({
    summary: string;
    description: string;
    disruptionStartDate: string;
    disruptionStartTime: string;
    id: string;
    disruptionType: "planned" | "unplanned";
    disruptionReason: import("../enums").MiscellaneousReason | import("../enums").PersonnelReason | import("../enums").EquipmentReason | import("../enums").EnvironmentReason;
    publishStartDate: string;
    publishStartTime: string;
    displayId: string;
    orgId?: string | undefined;
    permitReferenceNumber?: string | null | undefined;
    disruptionEndDate?: string | undefined;
    disruptionEndTime?: string | undefined;
    disruptionNoEndDateTime?: "" | "true" | undefined;
    disruptionRepeats?: "doesntRepeat" | "daily" | "weekly" | undefined;
    disruptionRepeatsEndDate?: string | undefined;
    associatedLink?: string | undefined;
    publishEndDate?: string | undefined;
    publishEndTime?: string | undefined;
    validity?: {
        disruptionStartDate: string;
        disruptionStartTime: string;
        disruptionEndDate?: string | undefined;
        disruptionEndTime?: string | undefined;
        disruptionNoEndDateTime?: "" | "true" | undefined;
        disruptionRepeats?: "doesntRepeat" | "daily" | "weekly" | undefined;
        disruptionRepeatsEndDate?: string | undefined;
    }[] | undefined;
    createdByOperatorOrgId?: string | null | undefined;
    creationTime?: string | null | undefined;
} & {
    publishStatus: PublishStatus;
    template: boolean;
    createdByOperatorOrgId?: string | null | undefined;
    creationTime?: string | undefined;
    consequences?: ({
        description: string;
        consequenceType: "networkWide";
        disruptionId: string;
        removeFromJourneyPlanners: "yes" | "no";
        disruptionSeverity: import("../enums").Severity;
        vehicleMode: import("../enums").VehicleMode;
        consequenceIndex: number;
        orgId?: string | undefined;
        disruptionArea?: string[] | undefined;
        disruptionDelay?: string | undefined;
    } | {
        description: string;
        consequenceType: "operatorWide";
        disruptionId: string;
        removeFromJourneyPlanners: "yes" | "no";
        disruptionSeverity: import("../enums").Severity;
        vehicleMode: import("../enums").VehicleMode;
        consequenceIndex: number;
        consequenceOperators: {
            operatorNoc: string;
            operatorPublicName: string;
        }[];
        orgId?: string | undefined;
        disruptionDelay?: string | undefined;
    } | {
        description: string;
        consequenceType: "stops";
        disruptionId: string;
        removeFromJourneyPlanners: "yes" | "no";
        disruptionSeverity: import("../enums").Severity;
        vehicleMode: import("../enums").VehicleMode;
        consequenceIndex: number;
        stops: {
            atcoCode: string;
            commonName: string;
            longitude: number;
            latitude: number;
            indicator?: string | undefined;
            serviceIds?: number[] | undefined;
            bearing?: string | undefined;
            sequenceNumber?: string | undefined;
            direction?: string | undefined;
            stopType?: string | undefined;
            busStopType?: string | undefined;
            journeyPatternId?: number | undefined;
        }[];
        orgId?: string | undefined;
        disruptionDelay?: string | undefined;
        pastStops?: {
            atcoCode: string;
            commonName: string;
            longitude: number;
            latitude: number;
            indicator?: string | undefined;
            serviceIds?: number[] | undefined;
            bearing?: string | undefined;
            sequenceNumber?: string | undefined;
            direction?: string | undefined;
            stopType?: string | undefined;
            busStopType?: string | undefined;
            journeyPatternId?: number | undefined;
        }[] | undefined;
    } | {
        description: string;
        consequenceType: "services";
        disruptionId: string;
        removeFromJourneyPlanners: "yes" | "no";
        disruptionSeverity: import("../enums").Severity;
        vehicleMode: import("../enums").VehicleMode;
        consequenceIndex: number;
        services: {
            id: number;
            lineName: string;
            operatorShortName: string;
            destination: string;
            origin: string;
            nocCode: string;
            dataSource: import("../enums").Datasource;
            startDate: string;
            endDate: string | null;
            serviceCode: string;
            lineId: string;
        }[];
        disruptionDirection: "allDirections" | "inbound" | "outbound";
        orgId?: string | undefined;
        disruptionDelay?: string | undefined;
        stops?: {
            atcoCode: string;
            commonName: string;
            longitude: number;
            latitude: number;
            indicator?: string | undefined;
            serviceIds?: number[] | undefined;
            bearing?: string | undefined;
            sequenceNumber?: string | undefined;
            direction?: string | undefined;
            stopType?: string | undefined;
            busStopType?: string | undefined;
            journeyPatternId?: number | undefined;
        }[] | undefined;
        serviceRefs?: string[] | undefined;
        stopRefs?: string[] | undefined;
    } | {
        description: string;
        consequenceType: "journeys";
        disruptionId: string;
        removeFromJourneyPlanners: "yes" | "no";
        disruptionSeverity: import("../enums").Severity;
        vehicleMode: import("../enums").VehicleMode;
        consequenceIndex: number;
        services: {
            id: number;
            lineName: string;
            operatorShortName: string;
            destination: string;
            origin: string;
            nocCode: string;
            dataSource: import("../enums").Datasource;
            startDate: string;
            endDate: string | null;
            serviceCode: string;
            lineId: string;
        }[];
        journeys: {
            direction: string;
            destination: string;
            origin: string;
            dataSource: import("../enums").Datasource;
            vehicleJourneyCode: string;
            departureTime: string;
            journeyCode?: string | null | undefined;
        }[];
        orgId?: string | undefined;
        disruptionDelay?: string | undefined;
        serviceRefs?: string[] | undefined;
        journeyRefs?: string[] | undefined;
    })[] | undefined;
    lastUpdated?: string | undefined;
    history?: {
        status: PublishStatus;
        historyItems: string[];
        user: string;
        datetime: string;
    }[] | undefined;
})[]>;
export declare const getOrgIdsFromDynamoByAdminAreaCodes: (tableName: string, administrativeAreaCodes: string[], logger: Logger) => Promise<{
    [key: string]: string[];
} | null>;
