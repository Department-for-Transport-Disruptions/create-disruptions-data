import { History } from "@create-disruptions-data/shared-ts/disruptionTypes.zod";
import { Dayjs } from "dayjs";
import { Disruption, Validity } from "../disruptionTypes";
import { Roadwork } from "../roadwork.zod";
export declare const notEmpty: <T>(value: T | null | undefined) => value is T;
export declare const chunkArray: <T>(array: T[], chunkSize: number) => T[][];
export declare const getApiValidityPeriods: (validityPeriods: Validity[]) => {
    disruptionRepeats: "daily" | "weekly" | undefined;
    disruptionRepeatsEndDate: string | undefined;
    disruptionStartDate: string;
    disruptionStartTime: string;
    disruptionEndDate?: string | undefined;
    disruptionEndTime?: string | undefined;
}[];
export declare const getApiDisruptions: (disruptions: (Disruption & {
    organisation: {
        id: string;
        name: string;
    };
})[]) => {
    associatedLink: string | undefined;
    validity: {
        disruptionRepeats: "daily" | "weekly" | undefined;
        disruptionRepeatsEndDate: string | undefined;
        disruptionStartDate: string;
        disruptionStartTime: string;
        disruptionEndDate?: string | undefined;
        disruptionEndTime?: string | undefined;
    }[];
    consequences: ({
        disruptionDelay: string | undefined;
        description: string;
        consequenceType: "networkWide";
        disruptionId: string;
        removeFromJourneyPlanners: "yes" | "no";
        disruptionSeverity: import("../enums").Severity;
        vehicleMode: import("../enums").VehicleMode;
        orgId?: string | undefined;
        disruptionArea?: string[] | undefined;
    } | {
        disruptionDelay: string | undefined;
        description: string;
        consequenceType: "operatorWide";
        disruptionId: string;
        removeFromJourneyPlanners: "yes" | "no";
        disruptionSeverity: import("../enums").Severity;
        vehicleMode: import("../enums").VehicleMode;
        consequenceOperators: {
            operatorNoc: string;
            operatorPublicName: string;
        }[];
        orgId?: string | undefined;
    } | {
        disruptionDelay: string | undefined;
        description: string;
        consequenceType: "stops";
        disruptionId: string;
        removeFromJourneyPlanners: "yes" | "no";
        disruptionSeverity: import("../enums").Severity;
        vehicleMode: import("../enums").VehicleMode;
        stops: {
            atcoCode: string;
            commonName: string;
            longitude: number;
            latitude: number;
            indicator?: string | undefined;
            serviceIds?: number[] | undefined;
            bearing?: string | undefined;
            sequenceNumber?: string | undefined;
            direction?: string | undefined;
            stopType?: string | undefined;
            busStopType?: string | undefined;
            journeyPatternId?: number | undefined;
        }[];
        orgId?: string | undefined;
        pastStops?: {
            atcoCode: string;
            commonName: string;
            longitude: number;
            latitude: number;
            indicator?: string | undefined;
            serviceIds?: number[] | undefined;
            bearing?: string | undefined;
            sequenceNumber?: string | undefined;
            direction?: string | undefined;
            stopType?: string | undefined;
            busStopType?: string | undefined;
            journeyPatternId?: number | undefined;
        }[] | undefined;
    } | {
        disruptionDelay: string | undefined;
        description: string;
        consequenceType: "services";
        disruptionId: string;
        removeFromJourneyPlanners: "yes" | "no";
        disruptionSeverity: import("../enums").Severity;
        vehicleMode: import("../enums").VehicleMode;
        services: {
            id: number;
            lineName: string;
            operatorShortName: string;
            destination: string;
            origin: string;
            nocCode: string;
            dataSource: import("../enums").Datasource;
            startDate: string;
            endDate: string | null;
            serviceCode: string;
            lineId: string;
        }[];
        disruptionDirection: "allDirections" | "inbound" | "outbound";
        orgId?: string | undefined;
        stops?: {
            atcoCode: string;
            commonName: string;
            longitude: number;
            latitude: number;
            indicator?: string | undefined;
            serviceIds?: number[] | undefined;
            bearing?: string | undefined;
            sequenceNumber?: string | undefined;
            direction?: string | undefined;
            stopType?: string | undefined;
            busStopType?: string | undefined;
            journeyPatternId?: number | undefined;
        }[] | undefined;
        serviceRefs?: string[] | undefined;
        stopRefs?: string[] | undefined;
    } | {
        disruptionDelay: string | undefined;
        description: string;
        consequenceType: "journeys";
        disruptionId: string;
        removeFromJourneyPlanners: "yes" | "no";
        disruptionSeverity: import("../enums").Severity;
        vehicleMode: import("../enums").VehicleMode;
        services: {
            id: number;
            lineName: string;
            operatorShortName: string;
            destination: string;
            origin: string;
            nocCode: string;
            dataSource: import("../enums").Datasource;
            startDate: string;
            endDate: string | null;
            serviceCode: string;
            lineId: string;
        }[];
        journeys: {
            direction: string;
            destination: string;
            origin: string;
            dataSource: import("../enums").Datasource;
            vehicleJourneyCode: string;
            departureTime: string;
            journeyCode?: string | null | undefined;
        }[];
        orgId?: string | undefined;
        serviceRefs?: string[] | undefined;
        journeyRefs?: string[] | undefined;
    })[];
    summary: string;
    description: string;
    id: string;
    disruptionType: "planned" | "unplanned";
    disruptionReason: import("../enums").MiscellaneousReason | import("../enums").PersonnelReason | import("../enums").EquipmentReason | import("../enums").EnvironmentReason;
    publishStartDate: string;
    publishStartTime: string;
    displayId: string;
    permitReferenceNumber?: string | null | undefined;
    publishEndDate?: string | undefined;
    publishEndTime?: string | undefined;
    createdByOperatorOrgId?: string | null | undefined;
    creationTime?: string | undefined;
    lastUpdated?: string | undefined;
    history?: {
        status: import("../enums").PublishStatus;
        historyItems: string[];
        user: string;
        datetime: string;
    }[] | undefined;
}[];
export type ApiDisruption = Awaited<ReturnType<typeof getApiDisruptions>>[0];
export type ApiConsequence = ApiDisruption["consequences"][0];
export declare const sortDisruptionsByStartDate: (disruptions: Disruption[]) => Disruption[];
export declare const getSortedDisruptionFinalEndDate: (disruption: Disruption | ApiDisruption) => Dayjs | null;
export declare const filterActiveDisruptions: (disruptions: Disruption[]) => Disruption[];
export type Logger = {
    info: (message: string) => void;
    error: (message: string | Error) => void;
    warn: (message: string) => void;
    debug: (message: string) => void;
};
export declare const getDisruptionCreationTime: (disruptionHistory: History[] | null, creationTime: string | null) => string;
export declare const getNextdoorClientIdAndSecret: () => Promise<{
    nextdoorClientId: string;
    nextdoorClientSecret: string;
}>;
export declare const getNextdoorAuthHeader: () => Promise<string>;
export declare const getLiveRoadworks: (roadworks: Roadwork[]) => {
    permitReferenceNumber: string;
    highwayAuthoritySwaCode: number;
    administrativeAreaCode: string;
    highwayAuthority?: string | undefined;
    worksLocationCoordinates?: string | null | undefined;
    streetName?: string | null | undefined;
    areaName?: string | null | undefined;
    proposedStartDateTime?: string | null | undefined;
    proposedEndDateTime?: string | null | undefined;
    actualStartDateTime?: string | null | undefined;
    actualEndDateTime?: string | null | undefined;
    workStatus?: "Works planned" | "Works in progress" | "Works completed" | "Works cancelled" | "Non notifiable works" | "Unattributable works" | "Historical works" | "Section 81 works" | null | undefined;
    activityType?: string | null | undefined;
    permitStatus?: "closed" | "cancelled" | "submitted" | "granted" | "permit_modification_request" | "refused" | "revoked" | "progressed" | null | undefined;
    town?: string | null | undefined;
    workCategory?: "Minor" | "Standard" | "Major" | "Major(PAA)" | "Immediate - urgent" | "Immediate - emergency" | "HS2 (Highway)" | null | undefined;
    trafficManagementType?: string | null | undefined;
    createdDateTime?: string | null | undefined;
    lastUpdatedDatetime?: string | null | undefined;
}[];
export declare const transformToArray: <T>(item: T | T[]) => T[];
