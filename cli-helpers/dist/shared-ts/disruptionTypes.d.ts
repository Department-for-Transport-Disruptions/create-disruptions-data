import { z } from "zod";
import { consequenceOperatorsSchema, consequenceSchema, disruptionInfoSchema, disruptionSchema, journeySchema, journeysConsequenceSchema, networkConsequenceSchema, operatorConsequenceSchema, serviceSchema, servicesConsequenceSchema, stopSchema, stopsConsequenceSchema, validitySchema } from "./disruptionTypes.zod";
export type Disruption = z.infer<typeof disruptionSchema>;
export type DisruptionInfo = z.infer<typeof disruptionInfoSchema>;
export type Validity = z.infer<typeof validitySchema>;
export type Consequence = z.infer<typeof consequenceSchema>;
export type ConsequenceOperators = z.infer<typeof consequenceOperatorsSchema>;
export type Stop = z.infer<typeof stopSchema>;
export type Service = z.infer<typeof serviceSchema>;
export type Journey = z.infer<typeof journeySchema>;
export type NetworkConsequence = z.infer<typeof networkConsequenceSchema>;
export type OperatorConsequence = z.infer<typeof operatorConsequenceSchema>;
export type StopsConsequence = z.infer<typeof stopsConsequenceSchema>;
export type ServicesConsequence = z.infer<typeof servicesConsequenceSchema>;
export type JourneysConsequence = z.infer<typeof journeysConsequenceSchema>;
export declare const serviceWithCentrePointSchema: z.ZodIntersection<z.ZodObject<{
    id: z.ZodNumber;
    lineName: z.ZodString;
    operatorShortName: z.ZodString;
    destination: z.ZodString;
    origin: z.ZodString;
    nocCode: z.ZodString;
    dataSource: z.ZodNativeEnum<typeof import("./enums").Datasource>;
    startDate: z.ZodString;
    endDate: z.ZodNullable<z.ZodString>;
    serviceCode: z.ZodString;
    lineId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: number;
    lineName: string;
    operatorShortName: string;
    destination: string;
    origin: string;
    nocCode: string;
    dataSource: import("./enums").Datasource;
    startDate: string;
    endDate: string | null;
    serviceCode: string;
    lineId: string;
}, {
    id: number;
    lineName: string;
    operatorShortName: string;
    destination: string;
    origin: string;
    nocCode: string;
    dataSource: import("./enums").Datasource;
    startDate: string;
    endDate: string | null;
    serviceCode: string;
    lineId: string;
}>, z.ZodObject<{
    centrePointLat: z.ZodNullable<z.ZodString>;
    centrePointLon: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    centrePointLat: string | null;
    centrePointLon: string | null;
}, {
    centrePointLat: string | null;
    centrePointLon: string | null;
}>>;
export type ServiceWithCentrePoint = z.infer<typeof serviceWithCentrePointSchema>;
export declare const routesSchema: z.ZodObject<{
    inbound: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
        atcoCode: z.ZodOptional<z.ZodString>;
        commonName: z.ZodOptional<z.ZodString>;
        indicator: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        longitude: z.ZodOptional<z.ZodNumber>;
        latitude: z.ZodOptional<z.ZodNumber>;
        serviceIds: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>>;
        bearing: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        sequenceNumber: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        direction: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        stopType: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        busStopType: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        journeyPatternId: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        atcoCode?: string | undefined;
        commonName?: string | undefined;
        indicator?: string | undefined;
        longitude?: number | undefined;
        latitude?: number | undefined;
        serviceIds?: number[] | undefined;
        bearing?: string | undefined;
        sequenceNumber?: string | undefined;
        direction?: string | undefined;
        stopType?: string | undefined;
        busStopType?: string | undefined;
        journeyPatternId?: number | undefined;
    }, {
        atcoCode?: string | undefined;
        commonName?: string | undefined;
        indicator?: string | undefined;
        longitude?: number | undefined;
        latitude?: number | undefined;
        serviceIds?: number[] | undefined;
        bearing?: string | undefined;
        sequenceNumber?: string | undefined;
        direction?: string | undefined;
        stopType?: string | undefined;
        busStopType?: string | undefined;
        journeyPatternId?: number | undefined;
    }>, "many">>;
    outbound: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
        atcoCode: z.ZodOptional<z.ZodString>;
        commonName: z.ZodOptional<z.ZodString>;
        indicator: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        longitude: z.ZodOptional<z.ZodNumber>;
        latitude: z.ZodOptional<z.ZodNumber>;
        serviceIds: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>>;
        bearing: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        sequenceNumber: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        direction: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        stopType: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        busStopType: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        journeyPatternId: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        atcoCode?: string | undefined;
        commonName?: string | undefined;
        indicator?: string | undefined;
        longitude?: number | undefined;
        latitude?: number | undefined;
        serviceIds?: number[] | undefined;
        bearing?: string | undefined;
        sequenceNumber?: string | undefined;
        direction?: string | undefined;
        stopType?: string | undefined;
        busStopType?: string | undefined;
        journeyPatternId?: number | undefined;
    }, {
        atcoCode?: string | undefined;
        commonName?: string | undefined;
        indicator?: string | undefined;
        longitude?: number | undefined;
        latitude?: number | undefined;
        serviceIds?: number[] | undefined;
        bearing?: string | undefined;
        sequenceNumber?: string | undefined;
        direction?: string | undefined;
        stopType?: string | undefined;
        busStopType?: string | undefined;
        journeyPatternId?: number | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    inbound: Record<string, {
        atcoCode?: string | undefined;
        commonName?: string | undefined;
        indicator?: string | undefined;
        longitude?: number | undefined;
        latitude?: number | undefined;
        serviceIds?: number[] | undefined;
        bearing?: string | undefined;
        sequenceNumber?: string | undefined;
        direction?: string | undefined;
        stopType?: string | undefined;
        busStopType?: string | undefined;
        journeyPatternId?: number | undefined;
    }[]>;
    outbound: Record<string, {
        atcoCode?: string | undefined;
        commonName?: string | undefined;
        indicator?: string | undefined;
        longitude?: number | undefined;
        latitude?: number | undefined;
        serviceIds?: number[] | undefined;
        bearing?: string | undefined;
        sequenceNumber?: string | undefined;
        direction?: string | undefined;
        stopType?: string | undefined;
        busStopType?: string | undefined;
        journeyPatternId?: number | undefined;
    }[]>;
}, {
    inbound: Record<string, {
        atcoCode?: string | undefined;
        commonName?: string | undefined;
        indicator?: string | undefined;
        longitude?: number | undefined;
        latitude?: number | undefined;
        serviceIds?: number[] | undefined;
        bearing?: string | undefined;
        sequenceNumber?: string | undefined;
        direction?: string | undefined;
        stopType?: string | undefined;
        busStopType?: string | undefined;
        journeyPatternId?: number | undefined;
    }[]>;
    outbound: Record<string, {
        atcoCode?: string | undefined;
        commonName?: string | undefined;
        indicator?: string | undefined;
        longitude?: number | undefined;
        latitude?: number | undefined;
        serviceIds?: number[] | undefined;
        bearing?: string | undefined;
        sequenceNumber?: string | undefined;
        direction?: string | undefined;
        stopType?: string | undefined;
        busStopType?: string | undefined;
        journeyPatternId?: number | undefined;
    }[]>;
}>;
export declare const routesPreformattedSchema: z.ZodObject<{
    inbound: z.ZodArray<z.ZodObject<{
        atcoCode: z.ZodOptional<z.ZodString>;
        commonName: z.ZodOptional<z.ZodString>;
        indicator: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        longitude: z.ZodOptional<z.ZodNumber>;
        latitude: z.ZodOptional<z.ZodNumber>;
        serviceIds: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>>;
        bearing: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        sequenceNumber: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        direction: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        stopType: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        busStopType: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        journeyPatternId: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        atcoCode?: string | undefined;
        commonName?: string | undefined;
        indicator?: string | undefined;
        longitude?: number | undefined;
        latitude?: number | undefined;
        serviceIds?: number[] | undefined;
        bearing?: string | undefined;
        sequenceNumber?: string | undefined;
        direction?: string | undefined;
        stopType?: string | undefined;
        busStopType?: string | undefined;
        journeyPatternId?: number | undefined;
    }, {
        atcoCode?: string | undefined;
        commonName?: string | undefined;
        indicator?: string | undefined;
        longitude?: number | undefined;
        latitude?: number | undefined;
        serviceIds?: number[] | undefined;
        bearing?: string | undefined;
        sequenceNumber?: string | undefined;
        direction?: string | undefined;
        stopType?: string | undefined;
        busStopType?: string | undefined;
        journeyPatternId?: number | undefined;
    }>, "many">;
    outbound: z.ZodArray<z.ZodObject<{
        atcoCode: z.ZodOptional<z.ZodString>;
        commonName: z.ZodOptional<z.ZodString>;
        indicator: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        longitude: z.ZodOptional<z.ZodNumber>;
        latitude: z.ZodOptional<z.ZodNumber>;
        serviceIds: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>>;
        bearing: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        sequenceNumber: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        direction: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        stopType: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        busStopType: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        journeyPatternId: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        atcoCode?: string | undefined;
        commonName?: string | undefined;
        indicator?: string | undefined;
        longitude?: number | undefined;
        latitude?: number | undefined;
        serviceIds?: number[] | undefined;
        bearing?: string | undefined;
        sequenceNumber?: string | undefined;
        direction?: string | undefined;
        stopType?: string | undefined;
        busStopType?: string | undefined;
        journeyPatternId?: number | undefined;
    }, {
        atcoCode?: string | undefined;
        commonName?: string | undefined;
        indicator?: string | undefined;
        longitude?: number | undefined;
        latitude?: number | undefined;
        serviceIds?: number[] | undefined;
        bearing?: string | undefined;
        sequenceNumber?: string | undefined;
        direction?: string | undefined;
        stopType?: string | undefined;
        busStopType?: string | undefined;
        journeyPatternId?: number | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    inbound: {
        atcoCode?: string | undefined;
        commonName?: string | undefined;
        indicator?: string | undefined;
        longitude?: number | undefined;
        latitude?: number | undefined;
        serviceIds?: number[] | undefined;
        bearing?: string | undefined;
        sequenceNumber?: string | undefined;
        direction?: string | undefined;
        stopType?: string | undefined;
        busStopType?: string | undefined;
        journeyPatternId?: number | undefined;
    }[];
    outbound: {
        atcoCode?: string | undefined;
        commonName?: string | undefined;
        indicator?: string | undefined;
        longitude?: number | undefined;
        latitude?: number | undefined;
        serviceIds?: number[] | undefined;
        bearing?: string | undefined;
        sequenceNumber?: string | undefined;
        direction?: string | undefined;
        stopType?: string | undefined;
        busStopType?: string | undefined;
        journeyPatternId?: number | undefined;
    }[];
}, {
    inbound: {
        atcoCode?: string | undefined;
        commonName?: string | undefined;
        indicator?: string | undefined;
        longitude?: number | undefined;
        latitude?: number | undefined;
        serviceIds?: number[] | undefined;
        bearing?: string | undefined;
        sequenceNumber?: string | undefined;
        direction?: string | undefined;
        stopType?: string | undefined;
        busStopType?: string | undefined;
        journeyPatternId?: number | undefined;
    }[];
    outbound: {
        atcoCode?: string | undefined;
        commonName?: string | undefined;
        indicator?: string | undefined;
        longitude?: number | undefined;
        latitude?: number | undefined;
        serviceIds?: number[] | undefined;
        bearing?: string | undefined;
        sequenceNumber?: string | undefined;
        direction?: string | undefined;
        stopType?: string | undefined;
        busStopType?: string | undefined;
        journeyPatternId?: number | undefined;
    }[];
}>;
export type Routes = z.infer<typeof routesSchema>;
export type RoutesPreformatted = z.infer<typeof routesPreformattedSchema>;
export type ServiceGeoJSON = {
    type: string;
    geometry: {
        type: string;
        coordinates: number[][];
    };
    properties: {
        service_line_id: string;
        destination: string;
        origin: string;
        service_line_name: string;
        service_noc_code: string;
        service_operator: string;
        service_code: string;
    };
};
